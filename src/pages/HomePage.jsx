// src/pages/HomePage.jsx
import React, { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { useCourseData } from '../context/CourseContext.jsx';
import { useAuth } from '../hooks/useAuth.js';
import LivesIndicator from '../components/common/LivesIndicator.jsx';
import SectionCard from '../components/courses/SectionCard.jsx';
import HomePageSkeleton from '../components/common/HomePageSkeleton.jsx';
import SegmentedControl from '../components/common/SegmentedControl.jsx';
import styles from './HomePage.module.css';

const HomePage = () => {
  const { courseData, error, reloadCourseData } = useCourseData();
  const { user } = useAuth();
  
  const [isPreparing, setIsPreparing] = useState(true);
  const [activeTab, setActiveTab] = useState('lectures'); // 'lectures' –∏–ª–∏ 'practice'

  useEffect(() => {
    const preparePage = async () => {
      try {
        await Promise.all([
          reloadCourseData(),
          new Promise(resolve => setTimeout(resolve, 1000))
        ]);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞, –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —ç–∫—Ä–∞–Ω –æ—à–∏–±–∫–∏.", err);
      } finally {
        setIsPreparing(false);
      }
    };
    preparePage();
  }, [reloadCourseData]);

  // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –Ω–∞ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞: –ª–µ–∫—Ü–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏
  const { lectureSections, practiceSections } = useMemo(() => {
    if (!courseData?.sections) {
      return { lectureSections: [], practiceSections: [] };
    }
    const lectures = courseData.sections.filter(section => !section.isPremium);
    const practices = courseData.sections.filter(section => section.isPremium);
    return { lectureSections: lectures, practiceSections: practices };
  }, [courseData]);

  // –í—ã–±–∏—Ä–∞–µ–º, –∫–∞–∫–æ–π –º–∞—Å—Å–∏–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const sectionsToDisplay = activeTab === 'lectures' ? lectureSections : practiceSections;

  if (isPreparing) {
    return <HomePageSkeleton />;
  }

  if (error) {
    return (
      <div className={styles.container}>
        <div className={styles.message}>
          <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å.</p>
          <button onClick={() => window.location.reload()} className="primaryButton">
            –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </button>
        </div>
      </div>
    );
  }

  // –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–∏–∫–∞–∫–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–µ—Ç
  if (!courseData || !courseData.sections || !courseData.sections.length) {
    return (
      <div className={styles.container}>
        <header className={styles.header}>
          <div className={styles.titleWrapper}>
            <h1 className={styles.title}>–ü—Ä–∏–≤–µ—Ç üëã</h1>
            <h2 className={styles.subtitle}>–ü–æ—Ä–∞ —É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã!</h2>
          </div>
        </header>
        {user && user.role === 'ADMIN' && (
          <Link to="/admin" className={styles.adminButton}>–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</Link>
        )}
        <div className={styles.message}>–ö—É—Ä—Å –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!</div>
      </div>
    );
  }

  const totalLessonsInCourse = lectureSections.reduce(
    (total, section) => total + section.chapters.reduce((sum, chapter) => sum + chapter.lectures.length, 0),
    0
  );
  const completedLessonsInCourse = Math.round((totalLessonsInCourse * courseData.totalCourseProgress) / 100);

  return (
    <div className={styles.container}>
      <header className={styles.header}>
        <div className={styles.livesWrapper}>
          <LivesIndicator />
        </div>
        <div className={styles.titleWrapper}>
          <h1 className={styles.title}>–ü—Ä–∏–≤–µ—Ç üëã</h1>
          <h2 className={styles.subtitle}>–ü–æ—Ä–∞ —É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã!</h2>
        </div>
      </header>

      {user && user.role === 'ADMIN' && (
        <Link to="/admin" className={styles.adminButton}>
          –ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        </Link>
      )}

      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–õ–µ–∫—Ü–∏–∏" */}
      {activeTab === 'lectures' && (
        <div className={styles.overallProgress}>
            <div className={styles.progressInfo}>
                <span className={styles.progressTitle}>–ü—Ä–æ–π—Ç–∏ {lectureSections.length} —Ä–∞–∑–¥–µ–ª–∞</span>
                <span className={styles.progressPercentage}>{courseData.totalCourseProgress}%</span>
            </div>
            <p className={styles.progressDescription}>
                {completedLessonsInCourse} –∏–∑ {totalLessonsInCourse} —É—Ä–æ–∫–æ–≤
            </p>
            <div className={styles.progressBarContainer}>
                <div className={styles.progressBar} style={{ width: `${courseData.totalCourseProgress}%` }} />
            </div>
        </div>
      )}

      <SegmentedControl
        options={[
          { label: '–õ–µ–∫—Ü–∏–∏', value: 'lectures' },
          { label: '–ü—Ä–∞–∫—Ç–∏–∫–∞', value: 'practice' },
        ]}
        selected={activeTab}
        onSelect={setActiveTab}
      />

      <main className={styles.sectionsList}>
        {sectionsToDisplay.length > 0 ? (
            sectionsToDisplay.map((section, index) => (
                <SectionCard key={section.id} section={section} index={index} />
            ))
        ) : (
            <div className={styles.message}>
                <p>
                    {activeTab === 'lectures'
                        ? '–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ—Ç –ª–µ–∫—Ü–∏–π. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!'
                        : '–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤. –û–Ω–∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!'
                    }
                </p>
            </div>
        )}
      </main>
    </div>
  );
};

export default HomePage;